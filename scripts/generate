#!/usr/bin/env node

/**
 * Usage:
 * generate <name>
 *
 *   argument:
 *      name: leetcode problem name, example: https://leetcode.com/problems/<name>/description/
 */
process.on('uncaughtException', function(err) {
  console.error('Error caught in uncaughtException event:', err);
});
process.on('unhandledRejection', (reason, p) => {
  console.error('Unhandled Rejection at:', p, 'reason:', reason);
});

const path = require('path');
const fs = require('fs-extra');
const puppeteer = require('puppeteer');
const html2markdown = require('html2markdown');

function firstUpperCase(str) {
  return str.toLowerCase().replace(/\b[a-z]/g, function(s) {
    return s.toUpperCase();
  });
}

const name = process.argv[2];

if (!name) {
  throw new Error(`Error: generate <name>`);
}

const problem = name
  .replace(/\s+/g, ' ')
  .split(' ')
  .map(word => {
    return firstUpperCase(word);
  })
  .join(' ')
  .replace(/\s/, '_');

const URL = `https://leetcode.com/problems/${name}/description/`;
const DIR_PATH = path.join(process.cwd(), 'solutions', problem);
const README_PATH = path.join(DIR_PATH, 'README.md');
const JS_FILE_PATH = path.join(DIR_PATH, 'index.js');
const JS_TEST_FILE_PATH = path.join(DIR_PATH, 'index.test.js');
const META_FILE_PATH = path.join(DIR_PATH, 'meta.json');

function sleep(ms) {
  return new Promise((resolve, reject) => {
    setTimeout(() => {
      resolve();
    }, ms);
  });
}

(async () => {
  const browser = await puppeteer.launch({
    headless: false
  });

  const page = await browser.newPage();

  await page.setViewport({
    width: 1920,
    height: 1080
  });

  console.info(`Navigate to ${URL} ...`);

  await page.goto(URL, {
    networkIdleTimeout: 5000,
    waitUntil: 'networkidle',
    timeout: 1000 * 60
  });

  await page.exposeFunction('sleep', sleep);

  console.info(`Exec script...`);

  // Get the "viewport" of the page, as reported by the page.
  const dimensions = await page.evaluate(async () => {
    const fireEvent = function(element, event) {
      if (document.createEventObject) {
        // IE浏览器支持fireEvent方法
        const evt = document.createEventObject();
        return element.fireEvent('on' + event, evt);
      } else {
        // 其他标准浏览器使用dispatchEvent方法
        const evt = document.createEvent('HTMLEvents');
        // initEvent接受3个参数：
        // 事件类型，是否冒泡，是否阻止浏览器的默认行为
        evt.initEvent(event, true, true);
        return !element.dispatchEvent(evt);
      }
    };

    try {
      const $title = $('.question-title h3');
      const $description = $('.question-description');
      const $select = $('.editor-base .control-btn-bar select.form-control');
      const $contributor = $(
        '#desktop-side-bar > div > ul > li:nth-child(5) > span.pull-right'
      );
      const $difficulty = $(
        '#desktop-side-bar > div > ul > li:nth-child(2) > span.pull-right.difficulty-label.round.label'
      );

      const $javascript = $('option[value=javascript]');
      let JavascriptCode = '';

      if ($javascript.length) {
        $javascript[0].selected = true;
        $select.value = $javascript.val();

        const originCode = Array.from($('.CodeMirror-line '))
          .map(ele => ele.innerText)
          .join('\n');

        fireEvent($select[0], 'change');

        while (
          Array.from($('.CodeMirror-line '))
            .map(ele => ele.innerText)
            .join('\n') === originCode
        ) {
          await sleep(100);
        }

        JavascriptCode = Array.from($('.CodeMirror-line '))
          .map(ele => ele.innerText)
          .join('\n')
          .trim();
      }

      return {
        title: ($title.text() || '').trim(),
        description: ($description.html() || '').trim(),
        code: JavascriptCode,
        contributor: ($contributor.text() || '').trim(),
        difficulty: ($difficulty.text() || '').trim()
      };
    } catch (err) {
      console.error(err);
      return {};
    }
  });

  console.info(`Generate File...`);

  await fs.ensureFile(README_PATH);
  await fs.ensureFile(JS_FILE_PATH);
  await fs.ensureFile(JS_TEST_FILE_PATH);
  await fs.ensureFile(META_FILE_PATH);

  // write markdown
  await fs.writeFile(
    README_PATH,
    `### [${dimensions.title}](${URL})

${html2markdown(dimensions.description)}
  `
  );

  // write js
  await fs.writeFile(
    JS_FILE_PATH,
    dimensions.code
      ? dimensions.code + `\n\nmodule.exports = null;`
      : await fs.readFile(path.join(__dirname, 'template', 'solution.js'))
  );

  // write test file
  await fs.writeFile(
    JS_TEST_FILE_PATH,
    await fs.readFile(path.join(__dirname, 'template', 'ava-test.js'))
  );

  // write meta file
  await fs.writeFile(
    META_FILE_PATH,
    JSON.stringify(
      {
        title: dimensions.title,
        url: URL,
        contributor: dimensions.contributor,
        difficulty: dimensions.difficulty
      },
      null,
      2
    )
  );

  console.info(`Generate File done and close browser.`);

  await browser.close();
})();
